#!/usr/bin/env ruby
#
# BioRuby bio-table Plugin BioTable
# Author:: Pjotr Prins
# Copyright:: 2012

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')

_VERSION = File.new(File.join(rootpath,'VERSION')).read.chomp

$stderr.print "bio-table "+_VERSION+" Copyright (C) 2012 Pjotr Prins <pjotr.prins@thebird.nl>\n\n"

USAGE =<<EOU

bio-table transforms, filters and reorders table files (CSV, tab-delimited).

EOU

if ARGV.size == 0
  print USAGE
end

require 'bio-table'
require 'optparse'
require 'bio-logger'

log = Bio::Log::LoggerPlus.new 'bio-table'
# log.outputters = Bio::Log::Outputter.stderr

Bio::Log::CLI.logger('stderr')
Bio::Log::CLI.trace('info')

options = {show_help: false, write_header: true}
options[:show_help] = true if ARGV.size == 0
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\n\n"

  o.on('--in-format [tab,csv]', [:tab, :csv], 'Input format (default tab)') do |par|
    options[:in_format] = par.to_sym
  end

  o.on('--format [tab,csv]', [:tab, :csv], 'Output format (default tab)') do |par|
    options[:format] = par.to_sym
  end
  
  o.on('--num-filter func', 'Numeric filtering function') do |par|
    options[:num_filter] = par
  end

  o.on('--columns list', Array, 'List of column names or indices') do |par|
    options[:columns] = par
  end

  o.on('--diff','Diff two input files') do
    options[:diff] = true
  end
  
  # o.on('--with-header','Include the header element in filtering etc.') do
  #   options[:with_header] = true
  # end
  
  o.on('--with-rownames','Include the rownames in filtering etc.') do
    options[:with_rownames] = true
  end
  
  o.separator ""

  o.on("--logger filename",String,"Log to file (default stderr)") do | name |
    Bio::Log::CLI.logger(name)
  end
  
  o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
    Bio::Log::CLI.trace(s)
  end
  
  o.on("-q", "--quiet", "Run quietly") do |q|
    Bio::Log::CLI.trace('error')
  end
  
  o.on("-v", "--verbose", "Run verbosely") do |v|
    Bio::Log::CLI.trace('info')
  end
  
  o.on("--debug", "Show debug messages") do |v|
    Bio::Log::CLI.trace('debug')
  end

  o.separator ""

  o.on_tail('-h', '--help', 'Display this help and exit') do
    options[:show_help] = true
  end
end

begin
  opts.parse!(ARGV)

  if options[:show_help] 
    print opts
    print USAGE
  end

  # TODO: your code here
  # use options for your logic
rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end

Bio::Log::CLI.configure('bio-table')
logger = Bio::Log::LoggerPlus['bio-table']
logger.info [options, ARGV]

include BioTable

ARGV.each do | fn |
  t = TableReader::read_file(fn, options)
  t.write(options)
  options[:write_header] = false  # don't write the header for chained files
end
